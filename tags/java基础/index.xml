<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java基础 - 标签 - Fortuna7</title>
        <link>https://EdgarDjj.github.io/tags/java%E5%9F%BA%E7%A1%80/</link>
        <description>Java基础 - 标签 - Fortuna7</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>edgarding97@gmail.com (EdgarDing)</managingEditor>
            <webMaster>edgarding97@gmail.com (EdgarDing)</webMaster><lastBuildDate>Thu, 12 Nov 2020 15:59:05 &#43;0000</lastBuildDate><atom:link href="https://EdgarDjj.github.io/tags/java%E5%9F%BA%E7%A1%80/" rel="self" type="application/rss+xml" /><item>
    <title>Java反射机制</title>
    <link>https://EdgarDjj.github.io/2020/11/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</link>
    <pubDate>Thu, 12 Nov 2020 15:59:05 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/11/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</guid>
    <description><![CDATA[Java反射机制 Class类 RTTI（Run-Time Type Identification）运行时类型识别，其作用是运行时识别一个对象的类型和类的信息。 运编译器已知道所有类型（在没有反射机制创建和使用类对象]]></description>
</item><item>
    <title>Java注解</title>
    <link>https://EdgarDjj.github.io/2020/11/java%E6%B3%A8%E8%A7%A3/</link>
    <pubDate>Thu, 12 Nov 2020 15:25:16 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/11/java%E6%B3%A8%E8%A7%A3/</guid>
    <description><![CDATA[Java注解 前言 实际上Java注解与普通修饰符(public、static、void等)的使用方式并没有多大区别，下面的例子是常见的注解： public class AnnotationDemo { //@Test注解修饰方法A @Test public static void A(){ System.out.println(&#34;Test.....&#34;); } //一个方法]]></description>
</item><item>
    <title>流式编程</title>
    <link>https://EdgarDjj.github.io/2020/10/%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
    <pubDate>Sat, 03 Oct 2020 18:57:06 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/10/%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
    <description><![CDATA[流式编程 集合优化了对象的存储，而流和对象的处理有关 流是一系列与特定存储机制无关的元素——实际上，流并没有“存储”之说。 使用流，无需迭代集合中的元素，就可以从管道提取和操作元素。这些管道通常被组合在一起]]></description>
</item><item>
    <title>函数式编程</title>
    <link>https://EdgarDjj.github.io/2020/10/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
    <pubDate>Sat, 03 Oct 2020 18:56:54 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/10/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
    <description><![CDATA[函数式编程 函数式编程语言操纵代码片段就像操作数据一样容易。 虽然 Java 不是函数式语言，但 Java 8 Lambda 表达式和方法引用 (Method References) 允许你以函数式编程。 函数编程（FP）：通过合并现有代码来生成新功能而不是从头开始编写所有内容]]></description>
</item></channel>
</rss>
