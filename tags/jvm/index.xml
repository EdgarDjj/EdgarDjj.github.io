<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JVM - 标签 - Fortuna7</title>
        <link>https://EdgarDjj.github.io/tags/jvm/</link>
        <description>JVM - 标签 - Fortuna7</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>edgarding97@gmail.com (EdgarDing)</managingEditor>
            <webMaster>edgarding97@gmail.com (EdgarDing)</webMaster><lastBuildDate>Fri, 06 Nov 2020 11:14:41 &#43;0000</lastBuildDate><atom:link href="https://EdgarDjj.github.io/tags/jvm/" rel="self" type="application/rss+xml" /><item>
    <title>虚拟机字节码执行引擎</title>
    <link>https://EdgarDjj.github.io/2020/11/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</link>
    <pubDate>Fri, 06 Nov 2020 11:14:41 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/11/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</guid>
    <description><![CDATA[虚拟机字节码执行引擎 简述时栈帧结构 栈帧（Stack Frame）是用于支持虚拟机进行方法调用和方法执行后背后的数据结构。 存储了方法的 局部变量表 操作数栈 动态连接 方法返回地址 一些额外的附加信息 局部变量表（L]]></description>
</item><item>
    <title>虚拟机类加载机制</title>
    <link>https://EdgarDjj.github.io/2020/11/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</link>
    <pubDate>Thu, 05 Nov 2020 16:39:47 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/11/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</guid>
    <description><![CDATA[虚拟机类加载机制 Java虚拟机把描述类的数据从Class问价加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用得当Java类型，这个过程称作虚拟机的类加载机制。 类加载的时机 类]]></description>
</item><item>
    <title>类文件结构</title>
    <link>https://EdgarDjj.github.io/2020/11/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</link>
    <pubDate>Thu, 05 Nov 2020 16:17:24 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/11/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</guid>
    <description><![CDATA[类文件格式 Class类文件的结构 Class文件类是一组由8个字节为基础单位的二进制流，各个数据项目按顺序紧凑地排列在文件中，中间没有任何分割符。使得整个Class文件中存储的内容几乎全是程序运行的必要]]></description>
</item><item>
    <title>JVM内存区域</title>
    <link>https://EdgarDjj.github.io/2020/10/jvm%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</link>
    <pubDate>Fri, 30 Oct 2020 11:52:44 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/10/jvm%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</guid>
    <description><![CDATA[JVM内存区域 由于Java不需要像C/C++一样为每个new操作去对应一个delete/free操作，不会出现内存泄漏和内存溢出问题，但正因如此，在出现此问题的时候，将会更加麻烦，因此我们需要了解虚拟]]></description>
</item><item>
    <title>Java GC垃圾收集器</title>
    <link>https://EdgarDjj.github.io/2020/10/java-gc%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</link>
    <pubDate>Thu, 22 Oct 2020 17:21:25 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/10/java-gc%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</guid>
    <description><![CDATA[Java GC垃圾收集器 简介 Java GC（Garbage Collection，垃圾回收）机制是Java 与 C++之间区别的一个重要特征，C++需要开发者自己实现垃圾回收的逻辑，而Java只需要专注于业务开发，垃圾回收]]></description>
</item></channel>
</rss>
