<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>设计模式 - 分类 - Fortuna7</title>
        <link>https://EdgarDjj.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
        <description>设计模式 - 分类 - Fortuna7</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>edgarding97@gmail.com (EdgarDing)</managingEditor>
            <webMaster>edgarding97@gmail.com (EdgarDing)</webMaster><lastBuildDate>Sat, 14 Nov 2020 13:12:33 &#43;0000</lastBuildDate><atom:link href="https://EdgarDjj.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>设计模式(re)</title>
    <link>https://EdgarDjj.github.io/2020/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-re/</link>
    <pubDate>Sat, 14 Nov 2020 13:12:33 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-re/</guid>
    <description><![CDATA[设计模式-re 创建者模式 该模式提供创建对象的机制，能够提升已有代码的灵活性和复用性 创建型模式包括： 工厂方法 Factory Method 抽象工厂 Abstract Factory 建造者 Builder 原型 Prototype 单例 SingleTon 工厂方法模式 工厂方法主要是在父类中提供一个创建对象的方法，]]></description>
</item><item>
    <title>抽象工厂模式</title>
    <link>https://EdgarDjj.github.io/2020/11/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Thu, 05 Nov 2020 18:49:16 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/11/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[抽象工厂模式（Abstract Factory） 在工厂模式中具体工厂负责具体产品，每个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般一个具体工厂只有一个工厂方法或者一组重载工厂方法。抽象工厂模式和]]></description>
</item><item>
    <title>工厂模式</title>
    <link>https://EdgarDjj.github.io/2020/11/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 04 Nov 2020 16:18:55 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/11/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[工厂模式 简单工厂模式（Simple Factory Pattern） 考虑一个简单的软件应用场景，一个软件系统可以提供多个外观不同的按钮（如圆形按钮、矩形按钮、菱形按钮等）， 这些按钮都源自同一个基类，不过在继承基类后不]]></description>
</item><item>
    <title>设计模式</title>
    <link>https://EdgarDjj.github.io/2020/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 26 Oct 2020 10:41:21 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[设计模式 设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。 设计模式分三种类型，共23种： 创建型模式：单例模式、建造者模式、工厂模式、抽象工厂模式]]></description>
</item><item>
    <title>单例模式</title>
    <link>https://EdgarDjj.github.io/2020/10/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 26 Oct 2020 10:33:31 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://EdgarDjj.github.io/2020/10/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[Java实现单例模式 单例定义 Singleton 模式主要作用保证在Java应用程序中，一个类Class只有一个实例存在。 另外方面，Singleton 也能够被无状态化。提供工具性质的功能， Singleton 模式就为我们提供了这样实现的可]]></description>
</item></channel>
</rss>
